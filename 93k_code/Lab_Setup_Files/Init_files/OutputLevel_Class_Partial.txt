



	  double dVout  = 0.0;
	   STRING strPin = "";

	   PPMU_SETTING                          ; // Add the name pSetOutputDC
	   PPMU_RELAY   pRelOutputDC, pRelRestore;
	   PPMU_MEASURE pMeaOutputDC;
	   PPMU_CLAMP   pClaOutputDC_ON, pClaOutputDC_OFF;
	   TASK_LIST    pTasOutputDC, pTasRestore;

	   strPin = mPin;

	   ON_FIRST_INVOCATION_BEGIN();

	     CONNECT();

	     cout << "\n Our own Output high level test at pin: " << mPin << endl;

	     pSetOutputDC.pin( mPin ).iForce(  ).iRange(  ).min(  ).max(  );
	     pSetOutputDC.wait( 1 ms );

	     //apply voltage clamp to avoid hot switching during PPMU relay closure
	     pClaOutputDC_ON.pin( mPin ).status( "CLAMP_ON" ).high( 4.7 ).low( 0.0 );

	     pRelOutputDC.pin( mPin ).status( " " );
	     pRelOutputDC.wait( 2 ms );

	     //remove clamps afterwards for improving measurement accuracy
	     pClaOutputDC_OFF.pin( mPin ).status( "CLAMP_OFF" );

	     pMeaOutputDC.pin( mPin ).execMode( TM::PVAL );

	     pRelRestore.pin( mPin ).status( "AC_ON" );
	     pRelRestore.wait( 0 ms );

	     FUNCTIONAL_TEST();

             // Add pMeaOutputDC before the execute();
	     pTasOutputDC.add( pSetOutputDC ).add( pClaOutputDC_ON ).add( pRelOutputDC ).add( pClaOutputDC_OFF ).add(  ).execute();
	     pTasRestore.add( pRelRestore ).execute();

	   ON_FIRST_INVOCATION_END();

	   cout << "My current force parameter = " << mCurrForce << endl;

	   STRING_VECTOR strPinList;
	   int iSizeOfPinList = 0;

	   //extract pin-group into string-array
	   strPinList = PinUtility.getDigitalPinNamesFromPinList( mPin, TM::IO_PIN, TRUE, TRUE );
	   iSizeOfPinList = strPinList.size();

	   //get Value and judge per pin
	   for( int iPinNameIndex = 0; iPinNameIndex < iSizeOfPinList; iPinNameIndex++ )
	   {
	     dVout = pMeaOutputDC.getValue( strPinList[iPinNameIndex] );
	   //  TESTSET().cont(true).judgeAndLog_ParametricTest( strPinList[iPinNameIndex], " ",  ,  );
	     cout << strPinList[iPinNameIndex] << "=" << dVout << " V" << endl;
	   }
	   return; 
 }
