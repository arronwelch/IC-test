 
//  RDI_functional test
 virtual void run()
  {
    //Add your test code here.

	  RDI_INIT();
	  ON_FIRST_INVOCATION_BEGIN();
	  CONNECT();
	  RDI_BEGIN();
	  rdi.burstId("My_Burst_1");
	  rdi.func("PF1").label("gross_func").execute();
	  rdi.func("PF2").label("gross_func_Fail").execute();
	  RDI_END();
	  DISCONNECT();
	  ON_FIRST_INVOCATION_END();

	  //Retrieve the test result
	  bool PassFail1 = rdi.id("PF1").getPassFail();
	  bool PassFail2 = rdi.id("PF2").getPassFail();
	  int PassFailBurst = rdi.id("My_Burst_1").getPassFail();

	  //Datalog
	  cout << "PassFail1 : " << PassFail1 << endl;
	  cout << "PassFail2 : " << PassFail2 << endl;
	  cout << "PassFailBurst : " << PassFailBurst << endl;

	  TESTSET().judgeAndLog_FunctionalTest(PassFail1&&PassFail2);

	//  TESTSET().cont(true).judgeAndLog_FunctionalTest(PassFail1,"funcTest1");
	//  TESTSET().cont(true).judgeAndLog_FunctionalTest(PassFail2,"funcTest2");


    return;

  }
  
  
// RDI DC Measurement
  
  
   virtual void run()
  {
    //Add your test code here.
	  RDI_INIT();
		  ON_FIRST_INVOCATION_BEGIN();
		  CONNECT();
		  RDI_BEGIN(TA::BURST);
		  rdi.burstId("My_Burst_2");
		  rdi.func().label("gross_func").execute();
		  rdi.dc("Vid1").pin("I/O1").iForce(-24 mA).vMeas().clamp(0.0,4.25).valueMode(TA::BADC).relay(TA::ppmuRly_onPPMU_offACDC, TA::ppmuRly_NO).execute();
		  rdi.dc("Vid2").pin("I/O3").iForce(-24 mA).vMeas().clamp(0.0,4.25).valueMode(TA::BADC).relay(TA::ppmuRly_onPPMU_offACDC,  TA::ppmuRly_NO).execute();
		  rdi.hwRelay().pin("I/O1,I/O3").setOff("PPMU").execute();
		  RDI_END();
		  DISCONNECT();
		  ON_FIRST_INVOCATION_END();

		  //Retrieve the test result
		  double vout1 = rdi.id("Vid1").getValue();
		  double vout2 = rdi.id("Vid2").getValue();

		  //Datalog
		  cout << "vout_I/O1 = " << vout1 << endl;
		  cout << "vout_I/O3 = " << vout2 << endl;

		 // TESTSET().cont(true).judgeAndLog_ParametricTest("I/O1","V_I/O1",tmLimits, vout1 );
		 // TESTSET().cont(true).judgeAndLog_ParametricTest("I/O3","V_I/O3",tmLimits, vout2 );

    return;
  }
  
  
 //RDI Idd Measurement 
  virtual void run()
  {
    //Add your test code here.
	  RDI_INIT();
		  ON_FIRST_INVOCATION_BEGIN();
		  CONNECT();
		  RDI_BEGIN();
		  rdi.func().label("gross_func").execute();
		  rdi.dc("idd1").pin("Vcc").iMeasRange(1 mA).measWait(3 ms).iMeas().execute();
		  RDI_END();

		  DISCONNECT();
		  ON_FIRST_INVOCATION_END();

		  //Retrieve the test result
		  double idd1 = rdi.id("idd1").getValue("Vcc");

		  //Datalog
		  cout << "idd1 = " << idd1 << endl;

		 TESTSET().cont(true).judgeAndLog_ParametricTest("Vcc","dps_param",tmLimits, idd1 );

    return;
  }
  
  
